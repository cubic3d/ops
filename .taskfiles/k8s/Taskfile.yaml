# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  cleanup-pods:
    desc: Clean up leftover Pods
    cmds:
      - for:
          matrix:
            PHASE: [Failed, Succeeded, Pending]
        cmd: kubectl delete pods --field-selector status.phase={{.ITEM.PHASE}} -A --ignore-not-found=true

  sync-externalsecret:
    desc: Sync ExternalSecret resource
    silent: true
    vars:
      NS: '{{default "default" .NS}}'
      ESNAME: '{{default "" .ESNAME}}'
    cmds:
      - |
        {{if eq .ESNAME ""}}
        kubectl get externalsecret.external-secrets.io --all-namespaces --no-headers -A | awk '{print $1, $2}' \
          | xargs --max-procs=2 -l bash -c 'kubectl --namespace $0 annotate externalsecret.external-secrets.io $1 force-sync=$(date +%s) --overwrite'
        {{else}}
        kubectl --namespace {{.NS}} annotate externalsecret.external-secrets.io {{.ESNAME}} force-sync=$(date +%s) --overwrite
        {{end}}
    preconditions:
      - '{{if ne .ESNAME ""}}kubectl --namespace {{.NS}} get externalsecret {{.ESNAME}}{{end}}'

  mount:
    desc: Mounts a PVC to a temporary pod [NS=default] APP=my-app
    interactive: true
    vars:
      NS: '{{default "default" .NS}}'
    requires:
      vars:
        - APP
    cmd: |-
      kubectl run -n {{.NS}} mount-{{.APP}} -i --tty --rm --image=null --privileged --overrides='
        {
          "apiVersion": "v1",
          "spec": {
            "containers": [
              {
                "name": "mount",
                "image": "docker.io/library/alpine:edge",
                "command": [
                  "/bin/sh"
                ],
                "workingDir": "/data",
                "stdin": true,
                "stdinOnce": true,
                "tty": true,
                "volumeMounts": [
                  {
                    "name": "data",
                    "mountPath": "/data"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "data",
                "persistentVolumeClaim": {
                  "claimName": "{{.APP}}"
                }
              }
            ],
            "restartPolicy": "Never"
          }
        }'
    preconditions:
      - kubectl -n {{.NS}} get pvc {{.APP}}
