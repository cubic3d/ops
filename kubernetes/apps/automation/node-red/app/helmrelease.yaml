# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app node-red
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: *app

  values:
    controllers:
      node-red:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: docker.io/nodered/node-red
              tag: 4.1.1

            envFrom:
              - secretRef:
                  name: node-red

            env:
              TZ: Europe/Berlin

            resources:
              requests:
                cpu: 5m
                memory: 512Mi
              limits:
                memory: 512Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node.longhorn.io/create-default-disk
                    operator: In
                    values:
                      - "true"
                      - config

    service:
      app:
        ports:
          http:
            port: 1880

    ingress:
      app:
        className: internal
        hosts:
          - host: r.${domain}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      data:
        existingClaim: node-red
        advancedMounts:
          node-red:
            app:
              - path: /data

      config-file:
        type: configMap
        identifier: config
        globalMounts:
          - path: /data/settings.js
            subPath: settings.js
            readOnly: true

    configMaps:
      config:
        data:
          settings.js: |-
            module.exports = {
              flowFile: 'flows.json',
              credentialSecret: process.env.NODE_RED_CREDENTIAL_SECRET,
              flowFilePretty: true,

              adminAuth: {
                type: "strategy",
                strategy: {
                  name: "openidconnect",
                  autoLogin: true,
                  label: "Sign in",
                  icon: "fa-cloud",
                  strategy: require("passport-openidconnect").Strategy,
                  options: {
                    issuer: "https://auth.${domain}",
                    authorizationURL: "https://auth.${domain}/api/oidc/authorization",
                    tokenURL: "https://auth.${domain}/api/oidc/token",
                    userInfoURL: "https://auth.${domain}/api/oidc/userinfo",
                    clientID: "node-red",
                    clientSecret: process.env.NODE_RED_OIDC_CLIENT_SECRET,
                    callbackURL: "https://r.${domain}/auth/strategy/callback",
                    scope: ["openid", "email", "profile", "groups"],
                    proxy: true,
                    verify: function (issuer, profile, done) {
                      done(null, profile);
                    },
                  },
                },
                users: [{ username: "cubic", permissions: ["*"] }],
              },

              uiPort: process.env.PORT || 1880,

              diagnostics: {
                enabled: true,
                ui: true,
              },

              runtimeState: {
                enabled: false,
                ui: false,
              },

              logging: {
                console: {
                  level: "info",
                  metrics: false,
                  audit: false,
                },
              },

              contextStorage: {
                default: { module: "localfilesystem" },
                memory: { module: "memory" },
              },

              exportGlobalContextKeys: false,

              externalModules: {
              },

              editorTheme: {
                palette: {
                },

                projects: {
                  enabled: false,
                  workflow: {
                    mode: "manual",
                  },
                },

                codeEditor: {
                  lib: "monaco",
                  options: {
                  },
                },

                markdownEditor: {
                  mermaid: {
                    enabled: true,
                  },
                },

                multiplayer: {
                  enabled: false,
                },
              },

              functionExternalModules: true,
              functionTimeout: 0,
              functionGlobalContext: {
              },

              debugMaxLength: 1000,

              mqttReconnectTime: 15000,
              serialReconnectTime: 15000,
            }
